The '101-lazy_matrix_mul' module
==========================

Using ''lazy_matrix_mul''
--------------------------


This is a text file in reStructuredText format. First import 'lazy_matrix_mul'
from the ''101-lazy_matrix_mul'' module.

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

::Valid case #1

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[7, 8], [9, 10], [11, 12]]
>>> print(lazy_matrix_mul(a, b))
[[ 58  64]
 [139 154]]

::Valid case #2

>>> a = [[1, 2], [3, 4]]
>>> b = [[5, 6], [7, 8]]
>>> print(lazy_matrix_mul(a, b))
[[19 22]
 [43 50]]


::Invalid case - m_a is not a list

>>> a = 5
>>> b = [[1, 2], [3, 4]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: Scalar operands are not allowed, use '*' instead


::Invalid case - m_b is not a list

>>> a = [[1, 2], [3, 4], [5, 6]]
>>> b = "not_a_list"
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: Scalar operands are not allowed, use '*' instead


::Invalid case = both a and b are empty lists

>>> a = []
>>> b = [[]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (0,) and (1,0) not aligned: 0 (dim 0) != 1 (dim 0)


::Invalid case when b is empty

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (2,3) and (1,0) not aligned: 3 (dim 1) != 1 (dim 0)

	
::Invalid case with a not having all integers or floats

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[5, 6], [2, 9], [1, 'a']]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
TypeError: invalid data type for einsum


::Invalid case where a rows are not of same size

>>> a = [5, 6, 10], [7, 8]]
>>> b = [[5, 6], [7, 8]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: setting an array element with a sequence.


::Invalid case where b rows are not of same size

>>> a = [[5, 6], [7, 8]]
>>> b = [[5, 6, 1], [7, 8]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: setting an array element with a sequence.


::Invalid case: matrices cannot be multiplied

>>> a = [[1, 2], [3, 4]]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


::Valid case with floats

>>> a = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> b = [[7.5, 8.5], [9.5, 10.5], [11.5, 12.5]]
>>> print(lazy_matrix_mul(a, b))
[[ 75.25  82.75]
 [160.75 177.25]]

::Valid case with floats #2

>>> a = [[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]]
>>> b = [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]]
>>> print(lazy_matrix_mul(a, b))
[[ 34.69   55.44 ]
 [-78.61   29.018]]

::Invalid case with a as list of integers:

>>> a = [1, 2, 3, 4]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (4,) and (3,2) not aligned: 4 (dim 0) != 3 (dim 0)


::Invalid case with b as a list of integers

>>> a = [[5, 6], [7, 8], [9, 10]]
>>> b = [1, 2, 3, 4]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (3,2) and (4,) not aligned: 2 (dim 1) != 4 (dim 0)


::Invalid case with a is a list of lists of not numbers

>>> a = [["this"], ["is"], ["word"]]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> print(lazy_matrix_mul(a, b))
Traceback (most recent call last):
	...
ValueError: shapes (3,1) and (3,2) not aligned: 1 (dim 1) != 3 (dim 0)


::Invalid case with zero argumenta:
>>> lazy_matrix_mul()
Traceback (most recent call last):
	...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


::Invalid case with one argument
>>> lazy_matrix_mul([[5, 6], [7, 8], [9, 10]])
Traceback (most recent call last):
	...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
