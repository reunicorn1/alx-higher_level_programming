The '100-matrix_mul' module
==========================

Using ''matrix_mul''
--------------------------


This is a text file in reStructuredText format. First import ''matrix_mul''
from the '100-matrix_mul' module.

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now use it:

::Valid case #1

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[7, 8], [9, 10], [11, 12]]
>>> matrix_mul(a, b)
[[58, 64], [139, 154]]


::Valid case #2

>>> a = [[1, 2], [3, 4]]
>>> b = [[5, 6], [7, 8]]
>>> matrix_mul(a, b)
[[19, 22], [43, 50]]


::Invalid case - m_a is not a list

>>> a = 5
>>> b = [[1, 2], [3, 4]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_a must be a list


::Invalid case - m_b is not a list

>>> a = [[1, 2], [3, 4], [5, 6]]
>>> b = "not_a_list"
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_b must be a list


::Invalid case = both a and b are emoty lists

>>> a = []
>>> b = [[]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
ValueError: m_a can't be empty


::Invalid casw when b is empty

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

	
::Invalid case with a not having all integers or floats

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[5, 6], [2, 9], [1, 'a']]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_b should contain only integers or floats


::Invalid casw where a rows are not of same size

>>> a = [[7, 8], [9, 10, 11], [12, 13]]
>>> b = [[1, 2, 3], [4, 5, 6]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: each row of m_a must be of the same size


::Invalid case where b rows are not of same size

>>> a = [[1, 2, 3], [4, 5, 6]]
>>> b = [[7, 8], [9, 10, 11], [12, 13]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: each row of m_b must be of the same size


::Invalid case: matrices cannot be multiplied

>>> a = [[1, 2], [3, 4]]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
ValueError: m_a and m_b can't be multiplied


::Valid case with floats

>>> a = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
>>> b = [[7.5, 8.5], [9.5, 10.5], [11.5, 12.5]]
>>> matrix_mul(a, b)
[[75.25, 82.75], [160.75, 177.25]]


::Valid case with floats #2

>>> a = [[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]]
>>> b = [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]]
>>> matrix_mul(a, b)
[[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]


::Invalid case with a as list of integers:

>>> a = [1, 2, 3, 4]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_a must be a list of lists


::Invalid case with b as a list of integers

>>> a = [[5, 6], [7, 8], [9, 10]]
>>> b = [1, 2, 3, 4]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_b must be a list of lists


::Invalid case with a is a list of lists of not numbers

>>> a = [["this"], ["is"], ["word"]]
>>> b = [[5, 6], [7, 8], [9, 10]]
>>> matrix_mul(a, b)
Traceback (most recent call last):
	...
TypeError: m_a should contain only integers or floats


::Invalid casw with zero argumenta:
>>> matrix_mul()
Traceback (most recent call last):
	...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


::Invalid casw with one argument
>>> matrix_mul([[5, 6], [7, 8], [9, 10]])
Traceback (most recent call last):
	...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
