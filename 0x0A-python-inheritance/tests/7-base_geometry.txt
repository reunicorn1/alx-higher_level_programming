The '7-base_geometry' module
==========================

Using ''BaseGeometry''
--------------------------


This is a text file in reStructuredText format. First import
''BaseGeometry'' from the '7-base_geometry' module.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:


>>> bg = BaseGeometry()


:: Valid integer
>>> bg.integer_validator("age", 25)


::  Valid integer (greater than 0)
>>> bg.integer_validator("quantity", 100)


:: Not an integer
>>> bg.integer_validator()
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'


:: Missing one argument
>>> bg.integer_validator("name")
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'


:: Not an integer #2
>>> bg.integer_validator("score", "abc")
Traceback (most recent call last):
	...
TypeError: <name> must be an integer


:: Less than or equal to 0
>>> bg.integer_validator("temperature", 0)
Traceback (most recent call last):
	...
ValueError: <name> must be greater than 0


:: Less than or equal to 0 #2
>>> bg.integer_validator("price", -5)
Traceback (most recent call last):
	...
ValueError: <name> must be greater than 0


:: Empty string (Invalid)
>>> bg.integer_validator("quantity", "")
Traceback (most recent call last):
	...
TypeError: <name> must be an integer


:: Positive infinity (Invalid)
>>> bg.integer_validator("amount", float('inf'))
Traceback (most recent call last):
	...
TypeError: <name> must be an integer


:: Negative infinity (Invalid)
>>> bg.integer_validator("count", float('-inf'))
Traceback (most recent call last):
	...
TypeError: <name> must be an integer


:: NaN (Invalid)
>>> bg.integer_validator("value", float('nan'))
Traceback (most recent call last):
	...
TypeError: <name> must be an integer
